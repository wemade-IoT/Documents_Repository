@startuml

class Question {
  +Id: int
  +Content: String
  +UserId: int
  +Question()
  +Question(command: CreateQuestionCommand)
  +Update(command: UpdateQuestionCommand)
}

class QuestionResource {
}

class QuestionResourceFromEntityAssembler {
  +ToResourceFromEntity(question: Question): QuestionResource
}

class QuestionRepository{
}

interface IQuestionRepository{
 +FindQuestionsByUserIdAsync(userId: int): List<Question>
    +FindAllQuestionsAsync(): List<Question>
}

interface IQuestionCommandService{
 +Handle(command: CreateQuestionCommand): Question
 +Handle(command: UpdateQuestionCommand): Question
}

class QuestionCommandService{
}

class CreateQuestionResource

class CreateQuestionCommandFromResourceAssembler {
  +ToCommandFromResource(resource: CreateQuestionResource): CreateQuestionCommand
}

class CreateQuestionCommand {
}

class UpdateQuestionResource

class UpdateQuestionCommandFromResourceAssembler {
  +ToCommandFromResource(resource: UpdateQuestionResource): UpdateQuestionCommand
}
class UpdateQuestionCommand {
}

interface IQuestionQueryService {
+Handle(query: GetQuestionsByUserIdQuery): List<Question>
+Handle(query: GetAllQuestionsQuery): List<Question>
}

class GetQuestionsByUserIdQuery {
}
class GetAllQuestionsQuery

 class QuestionQueryService

 class QuestionController {
 +CreateQuestion(resource: CreateQuestionResource)
    +UpdateQuestion(resource: UpdateQuestionResource)
    +GetQuestionsByUserId(query: GetQuestionsByUserIdQuery)
}

Question ..> CreateQuestionCommand
Question ..> UpdateQuestionCommand
QuestionResourceFromEntityAssembler --> Question
IQuestionRepository ..> Question
QuestionResourceFromEntityAssembler --> QuestionResource
QuestionRepository ..|> IQuestionRepository
IQuestionCommandService --> CreateQuestionCommand
IQuestionCommandService --> UpdateQuestionCommand
QuestionCommandService ..|> IQuestionCommandService
QuestionCommandService ..> IQuestionRepository
QuestionController ..> IQuestionCommandService
QuestionController ..> IQuestionQueryService
QuestionQueryService ..|> IQuestionQueryService
QuestionQueryService ..> IQuestionRepository
GetQuestionsByUserIdQuery ..> IQuestionQueryService
GetAllQuestionsQuery ..> IQuestionQueryService
CreateQuestionCommandFromResourceAssembler --> CreateQuestionCommand
CreateQuestionCommandFromResourceAssembler --> CreateQuestionResource
UpdateQuestionCommandFromResourceAssembler --> UpdateQuestionCommand
UpdateQuestionCommandFromResourceAssembler --> UpdateQuestionResource





class Answer {
  +Id: int
  +UserId : int
  +QuestionId: int
  +Content: String
  +Answer()
  +Answer(command: CreateAnswerCommand)
  +Update(command: UpdateAnswerCommand)
}

class AnswerResource {
}

class AnswerResourceFromEntityAssembler {
  +ToResourceFromEntity(answer: Answer): AnswerResource
}

class AnswerRepository{
}

interface IAnswerRepository{
 +FindAnswersByQuestionIdAsync(questionId: int): List<Answer>
    +FindAnswersByUserIdAsync(userId: int): List<Answer>
}

interface IAnswerCommandService{
 +Handle(command: CreateAnswerCommand): Answer
 +Handle(command: UpdateAnswerCommand): Answer
}

class AnswerCommandService{
}

class CreateAnswerResource
class CreateAnswerCommandFromResourceAssembler {
  +ToCommandFromResource(resource: CreateAnswerResource): CreateAnswerCommand
}

class CreateAnswerCommand {
}
class UpdateAnswerResource
class UpdateAnswerCommandFromResourceAssembler {
  +ToCommandFromResource(resource: UpdateAnswerResource): UpdateAnswerCommand
}
class UpdateAnswerCommand {
}
interface IAnswerQueryService {
+Handle(query: GetAnswersByQuestionIdQuery): List<Answer>
+Handle(query: GetAnswersByUserIdQuery): List<Answer>
}
class GetAnswersByQuestionIdQuery {
}
class GetAnswersByUserIdQuery {
 }




 class AnswerQueryService

 class AnswerController {
 +CreateAnswer(resource: CreateAnswerResource)
    +UpdateAnswer(resource: UpdateAnswerResource)
    +GetAnswersByQuestionId(query: GetAnswersByQuestionIdQuery)
}
Answer ..> CreateAnswerCommand
Answer ..> UpdateAnswerCommand
AnswerResourceFromEntityAssembler --> Answer
IAnswerRepository ..> Answer
AnswerResourceFromEntityAssembler --> AnswerResource
AnswerRepository ..|> IAnswerRepository
IAnswerCommandService --> CreateAnswerCommand
IAnswerCommandService --> UpdateAnswerCommand
AnswerCommandService ..|> IAnswerCommandService
AnswerCommandService ..> IAnswerRepository
AnswerController ..> IAnswerCommandService
AnswerController ..> IAnswerQueryService
AnswerQueryService ..|> IAnswerQueryService
AnswerQueryService ..> IAnswerRepository
GetAnswersByQuestionIdQuery ..> IAnswerQueryService
GetAnswersByUserIdQuery ..> IAnswerQueryService
CreateAnswerCommandFromResourceAssembler --> CreateAnswerCommand
CreateAnswerCommandFromResourceAssembler --> CreateAnswerResource
UpdateAnswerCommandFromResourceAssembler --> UpdateAnswerCommand
UpdateAnswerCommandFromResourceAssembler --> UpdateAnswerResource


class QuestionPool {
  +Id: int
  +UserId: int
    +QuestionId: int
  +Type: String
  +QuestionAnswer: Text
    +QuestionPool()
    +QuestionPool(questionAnswer: Text)
}

class QuestionPoolRepository{
}
interface IQuestionPoolRepository{
    +FindAllQuestionPoolsAsync(): List<QuestionPool>
}
interface IQuestionPoolQueryService {
+Handle(query: GetAllQuestionPoolsQuery): List<QuestionPool>
}
class GetAllQuestionPoolsQuery {
}
class QuestionPoolQueryService
IQuestionPoolRepository ..> QuestionPool

QuestionPoolRepository ..|> IQuestionPoolRepository
QuestionPoolQueryService ..|> IQuestionPoolQueryService
QuestionPoolQueryService ..> IQuestionPoolRepository
GetAllQuestionPoolsQuery ..> IQuestionPoolQueryService


@enduml